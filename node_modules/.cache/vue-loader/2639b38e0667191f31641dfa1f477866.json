{"remainingRequest":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nan3ds/3DsProject/pam-builder/src/pages/Image.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nan3ds/3DsProject/pam-builder/src/pages/Image.vue","mtime":1608002283601},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/css-loader/dist/cjs.js","mtime":1605252086771},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1605690691983},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/postcss-loader/src/index.js","mtime":1605252087302},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/sass-loader/dist/cjs.js","mtime":1605252140614},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/cache-loader/dist/cjs.js","mtime":1605252086732},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js","mtime":1605690691983}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy9NYWluLnNjc3MnOwo="},{"version":3,"sources":["Image.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8MA","file":"Image.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <span style=\"width: 100%;\">\n    <BoxComponent\n      :elementName=\"elementName\"\n      :elementProps=\"elementProps\"\n      :action=\"management\"\n      @click=\"doEmitAddElement\"\n    >\n      <template slot=\"content\">\n        <img\n          v-if=\"elementProps.url\"\n          :src=\"elementProps.url\"\n          :width=\"elementProps.width || '100%'\"\n        />\n      </template>\n      <template slot=\"button-management\">\n        <MainButtonComponent\n          class=\"button-box\"\n          :elementId=\"elementId\"\n          @click=\"onUpdateManagement\"\n        />\n      </template>\n    </BoxComponent>\n    <ModalComponent\n      :ref=\"`modal-edit-${elementId}`\"\n      :modal=\"{ width: changeImage ? 900 : 1000, action: 'edit', button: { custom: true } }\"\n      :elementId=\"elementId\"\n    >\n      <template slot=\"content\">\n        <div class=\"modal-content-image\">\n          <ImageAssetContent\n            v-show=\"changeImage\"\n            :changeImage=\"changeImage\"\n            :imageUrl=\"imageUrl\"\n            @click=\"onUpdateChangeImage\"\n          />\n          <div v-show=\"!changeImage\">\n            <ImageToolbarPanel\n              :elementId=\"elementId\"\n              :elementProps=\"elementProps\"\n              :management=\"management\"\n              :imageUrl=\"imageUrl\"\n              @change=\"getImageData\"\n            />\n            <div :id=\"`image-container-preview-${elementId}`\" class=\"image-preview-container\">\n              <img\n                :id=\"`image-preview-${elementId}`\"\n                v-if=\"imageUrl\"\n                class=\"image-preview\"\n                :src=\"imageUrl\"\n              />\n              <div v-else class=\"no-image\">\n                <i class=\"mdi mdi-image-plus no-image-icon\" />\n                <p class=\"no-image-text\">click the below button to add image</p>\n                <SquareButtonComponent\n                  label=\"Browse\"\n                  className=\"no-image-button clickable\"\n                  @click=\"doAddImage\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </template>\n      <template slot=\"action-custom\">\n        <FooterPanel\n          v-show=\"!changeImage\"\n          :elementId=\"elementId\"\n          :elementName=\"elementName\"\n          :elementProps=\"elementProps\"\n          :management=\"management\"\n          :imageUrl=\"imageUrl\"\n          @change=\"onUpdatePreview\"\n          @click=\"onUpdateFooterPanelData\"\n        />\n      </template>\n    </ModalComponent>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Watch } from 'vue-property-decorator'\nimport BaseComponent from '../core/BaseComponent'\n\n@Component\nexport default class ImagePage extends BaseComponent {\n  @Prop(String) elementId!: string\n  @Prop(String) elementName!: string\n  @Prop() elementProps!: any\n\n  management: any = {}\n  previewData: any = {}\n  imageData: any = {}\n  footerData = {}\n  changeImage = false\n  imageUrl = ''\n\n  getImageData(data: any) {\n    this.imageData = { ...data }\n    this.doAssignStyle()\n  }\n\n  onUpdateChangeImage(data: any) {\n    this.changeImage = data.changeImage\n    if (data.url) { this.imageUrl = data.url }\n    this.doAssignStyle()\n  }\n\n  doAssignStyle() {\n    Object.assign(this.previewData, this.imageData)\n    const self = this\n    const previewContainerStyle: any = {}\n    const previewImageStyle: any = {}\n    if (JSON.stringify(this.previewData) !== '{}') {\n      const border = this.previewData['border-bottom']\n      const backgroundColor = this.previewData['background-color']\n      const width = this.previewData.width\n      const justify = this.previewData.flexbox['justify-content']\n      const align = this.previewData.flexbox['align-items']\n      if (border) { previewContainerStyle['border-bottom'] = `${border.width} ${border.style} ${border.color}` }\n      if (backgroundColor) { previewContainerStyle['background-color'] = backgroundColor }\n      if (width) { previewImageStyle.width = width }\n      if (justify) { previewContainerStyle['justify-content'] = justify }\n      if (align) { previewContainerStyle['align-items'] = align }\n    }\n    setTimeout(() => {\n      this.doSetAttributeStyle(`image-container-preview-${self.elementId}`, previewContainerStyle)\n      this.doSetAttributeStyle(`image-preview-${self.elementId}`, previewImageStyle)\n    }, 10)\n  }\n\n  doSetAttributeStyle(id: string, lists: object) {\n    document.getElementById(id)?.setAttribute(\n      'style',\n      JSON.stringify({...lists})\n        .substring(1, JSON.stringify({...lists}).length - 1)\n        .replaceAll(',', ';')\n        .replaceAll('\"', '')\n    )\n  }\n\n  onUpdateManagement(data: any) {\n    this.management = data\n    if (this.management.duplicate || this.management.delete) {\n      this.doEmitData()\n    }\n  }\n\n  onUpdatePreview(data: any) {\n    this.previewData = {}\n    this.previewData = data\n    this.changeImage = data.changeImage || false\n    this.doAssignStyle()\n  }\n\n  onUpdateFooterPanelData(data: any) {\n    this.footerData = data\n    this.management.edit = false\n    if (data) { this.doEmitData() }\n  }\n\n  doAddImage() {\n    this.changeImage = true\n  }\n\n  doEmitData() {\n    if (this.management.delete) {\n      this.$emit('delete', this.elementId)\n    } else if (this.management.duplicate) {\n      this.$emit('duplicate', {\n        id: this.elementId,\n        position: this.management.position,\n        duplicate: this.management.duplicate\n      })\n    } else {\n      this.$emit('done', {\n        id: this.elementId,\n        props: {\n          url: this.imageUrl,\n          ...this.previewData\n        }\n      })\n    }\n  }\n\n  doEmitAddElement(data: any) {\n    this.$emit('add', { id: this.elementId, ...data })\n  }\n\n  @Watch('management', { deep: true })\n  onEdit() {\n    const ref = this.$refs[`modal-edit-${this.elementId}`]\n    if (ref) {\n      ref.isOpenModal = this.management.edit\n      if (ref.isOpenModal && this.elementProps) {\n        this.imageUrl = this.elementProps.url\n        if (this.elementProps.url) {\n          this.changeImage = true\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  @import '../assets/scss/Main.scss';\n</style>\n"]}]}