{"remainingRequest":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nan3ds/3DsProject/pam-builder/src/pages/contents/image/Assets.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/nan3ds/3DsProject/pam-builder/src/pages/contents/image/Assets.vue","mtime":1608105483015},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/cache-loader/dist/cjs.js","mtime":1605252086732},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/babel-loader/lib/index.js","mtime":1605690691451},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/ts-loader/index.js","mtime":1606390504017},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/cache-loader/dist/cjs.js","mtime":1605252086732},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js","mtime":1605690691983}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQgXyBmcm9tICdsb2Rhc2gnCmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgV2F0Y2ggfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJwppbXBvcnQgeyBBY3Rpb24gfSBmcm9tICd2dWV4LWNsYXNzJwppbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9jb3JlL0Jhc2VDb21wb25lbnQnCmltcG9ydCB7IElJbWFnZUxpc3RzLCBJSW1hZ2VJdGVtIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9JbWFnZScKaW1wb3J0IHsgSU1BR0VfTElTVFMgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMvSW1hZ2UnCgpAQ29tcG9uZW50CmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlQXNzZXRDb250ZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7CiAgICBAUHJvcChCb29sZWFuKSBjaGFuZ2VJbWFnZSE6IGJvb2xlYW4KICAgIEBQcm9wKFN0cmluZykgaW1hZ2VVcmwhOiBzdHJpbmcKICAgIAogICAgdXJsID0gdGhpcy5pbWFnZVVybAogICAgaW1hZ2VMaXN0czogSUltYWdlTGlzdHMgPSBfLmNsb25lRGVlcChJTUFHRV9MSVNUUykgLy8gYXBpIGRhdGEKICAgIGZpbHRlckltYWdlTGlzdHM6IElJbWFnZUl0ZW1bXSA9IHRoaXMuaW1hZ2VMaXN0cy5pdGVtcwoKICAgIEBBY3Rpb24oJ2xvZ2luL1Bvc3RMb2dpbkRhdGEnKQogIHByaXZhdGUgcG9zdExvZ2luRGF0YSE6IChsb2dpbkRhdGE6IHsgZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9KSA9PiBQcm9taXNlPElBdXRoU3RhdHVzPgoKICAgIGRvQ29udmVydEltYWdlU2l6ZShzaXplOiBudW1iZXIpIHsKICAgICAgICBsZXQgdHJhbnNmb3JtU2l6ZTogYW55ID0gJzAgYnl0ZScKICAgICAgICBpZiAoc2l6ZSA+PSAxMDQ4NTc2KSB7IHRyYW5zZm9ybVNpemUgPSAoc2l6ZSAvIDEwNDg1NzYpLnRvRml4ZWQoMikgKyAnIE1CJyB9CiAgICAgICAgZWxzZSBpZiAoc2l6ZSA+PSAxMDI0KSB7IHRyYW5zZm9ybVNpemUgPSAoc2l6ZSAvIDEwMjQpLnRvRml4ZWQoMikgKyAnIEtCJyB9CiAgICAgICAgZWxzZSBpZiAoc2l6ZSA+IDEpIHsgdHJhbnNmb3JtU2l6ZSA9IHNpemUgKyAnIGJ5dGVzJyB9CiAgICAgICAgZWxzZSBpZiAoc2l6ZSA9PSAxKSB7IHRyYW5zZm9ybVNpemUgPSBzaXplICsgJyBieXRlJyB9CiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVNpemUKICAgIH0KCiAgICBkb1NlbGVjdEltYWdlKHVybDogc3RyaW5nKSB7CiAgICAgICAgdGhpcy51cmwgPSB1cmwKICAgIH0KCiAgICBkb0dldEltYWdlcyhkYXRhOiBhbnkgPSAnJykgewogICAgICAgIHRoaXMuZmlsdGVySW1hZ2VMaXN0cyA9IHRoaXMuaW1hZ2VMaXN0cy5pdGVtcy5maWx0ZXIoCiAgICAgICAgICAgIChpdGVtOiBJSW1hZ2VJdGVtKSA9PiBfLmluY2x1ZGVzKF8udG9Mb3dlcihpdGVtLnRpdGxlKSwgXy50b0xvd2VyKGRhdGEpKQogICAgICAgICkKICAgIH0KCiAgICBkb0VtaXRHZXRJbWFnZSgpIHsKICAgICAgICB0aGlzLiRlbWl0KCdjbGljaycsIHsgdXJsOiB0aGlzLnVybCwgY2hhbmdlSW1hZ2U6IGZhbHNlIH0pCiAgICB9CgogICAgZG9FbWl0Q2FuY2VsKCkgewogICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrJywgeyBjaGFuZ2VJbWFnZTogZmFsc2UgfSkKICAgIH0KCiAgICAvLyBAV2F0Y2goJ2NoYW5nZUltYWdlJykKICAgIC8vIGFzeW5jIG9uQ2hhbmdlSW1hZ2UoKSB7CiAgICAvLyAgICAgaWYgKHRoaXMuY2hhbmdlSW1hZ2UpIHt9CiAgICAvLyB9Cn0K"},{"version":3,"sources":["Assets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Assets.vue","sourceRoot":"src/pages/contents/image","sourcesContent":["<template>\n  <div class=\"image-asset\">\n    <div class=\"image-asset-header\">\n        <h2 class=\"image-asset-header-title\">Image Assets</h2>\n        <div class=\"image-asset-header-upload\">\n            <UploadImageComponent ref=\"upload\" />\n            <div class=\"image-asset-header-upload-description\">\n                * File size must be less then 2 MB\n            </div>\n        </div>\n    </div>\n    <div class=\"image-asset-content\">\n        <div class=\"image-asset-content-preview\">\n            <div class=\"preview-text\">Preview</div>\n            <img v-if=\"url\" :src=\"url\" class=\"image-preview\"/> \n        </div>\n        <div class=\"image-asset-content-search\">\n            <div class=\"search-input\">\n                <InputComponent\n                    name=\"search-image\"\n                    placeholder=\"Search Image\"\n                    :search=\"true\"\n                    @change=\"doGetImages\"\n                />\n            </div>\n            <div class=\"search-list\">\n                <div\n                    v-for=\"(item, index) in filterImageLists\"\n                    :key=\"index\"\n                    class=\"search-list-item\"\n                    :class=\"{\n                        'clickable': !item.uploading,\n                        'search-list-item-active': item.url === url\n                    }\"\n                    @click=\"item.uploading ? '' : doSelectImage(item.url)\"\n                >\n                    <div class=\"search-list-item-image-container\">\n                        <img class=\"search-list-item-image\" :src=\"item.url\" />\n                    </div>\n                    <div class=\"search-list-item-detail\">\n                        <div v-if=\"!item.uploading\" class=\"image-uploading\">\n                            <div class=\"image-uploading-status\">Uploading...</div>\n                            <div class=\"image-uploading-progress\">\n                                <progress max=\"100\" :value.prop=\"uploadPercentage\" />\n                            </div>\n                        </div>\n                        <div v-else class=\"image-complete\">\n                            <div class=\"image-name\">{{ item.title }}</div>\n                            <div class=\"image-size\">{{ doConvertImageSize(item.size) }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"image-asset-action\">\n        <SquareButtonComponent\n            label=\"Cancel\"\n            className=\"cancel-square-button\"\n            @click=\"doEmitCancel\"\n        />\n        <SquareButtonComponent\n            label=\"Add Image\"\n            className=\"done-square-button\"\n            @click=\"doEmitGetImage\"\n        />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport _ from 'lodash'\nimport { Component, Prop, Watch } from 'vue-property-decorator'\nimport { Action } from 'vuex-class'\nimport BaseComponent from '../../../core/BaseComponent'\nimport { IImageLists, IImageItem } from '../../../interfaces/Image'\nimport { IMAGE_LISTS } from '../../../constants/Image'\n\n@Component\nexport default class ImageAssetContent extends BaseComponent {\n    @Prop(Boolean) changeImage!: boolean\n    @Prop(String) imageUrl!: string\n    \n    url = this.imageUrl\n    imageLists: IImageLists = _.cloneDeep(IMAGE_LISTS) // api data\n    filterImageLists: IImageItem[] = this.imageLists.items\n\n    @Action('login/PostLoginData')\n  private postLoginData!: (loginData: { email: string, password: string }) => Promise<IAuthStatus>\n\n    doConvertImageSize(size: number) {\n        let transformSize: any = '0 byte'\n        if (size >= 1048576) { transformSize = (size / 1048576).toFixed(2) + ' MB' }\n        else if (size >= 1024) { transformSize = (size / 1024).toFixed(2) + ' KB' }\n        else if (size > 1) { transformSize = size + ' bytes' }\n        else if (size == 1) { transformSize = size + ' byte' }\n        return transformSize\n    }\n\n    doSelectImage(url: string) {\n        this.url = url\n    }\n\n    doGetImages(data: any = '') {\n        this.filterImageLists = this.imageLists.items.filter(\n            (item: IImageItem) => _.includes(_.toLower(item.title), _.toLower(data))\n        )\n    }\n\n    doEmitGetImage() {\n        this.$emit('click', { url: this.url, changeImage: false })\n    }\n\n    doEmitCancel() {\n        this.$emit('click', { changeImage: false })\n    }\n\n    // @Watch('changeImage')\n    // async onChangeImage() {\n    //     if (this.changeImage) {}\n    // }\n}\n</script>\n\n<style lang=\"scss\">\n  @import '../../../assets/scss/Main.scss';\n</style>\n"]}]}