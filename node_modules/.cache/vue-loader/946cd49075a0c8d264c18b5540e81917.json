{"remainingRequest":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nan3ds/3DsProject/pam-builder/src/components/styles/Border.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nan3ds/3DsProject/pam-builder/src/components/styles/Border.vue","mtime":1607943660178},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/css-loader/dist/cjs.js","mtime":1605252086771},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1605690691983},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/postcss-loader/src/index.js","mtime":1605252087302},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/sass-loader/dist/cjs.js","mtime":1605252140614},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/cache-loader/dist/cjs.js","mtime":1605252086732},{"path":"/Users/nan3ds/3DsProject/pam-builder/node_modules/vue-loader/lib/index.js","mtime":1605690691983}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICcuLi8uLi9hc3NldHMvc2Nzcy9NYWluLnNjc3MnOwo="},{"version":3,"sources":["Border.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA","file":"Border.vue","sourceRoot":"src/components/styles","sourcesContent":["<template>\n  <span>\n    <SwitchComponent\n      :name=\"`footer-panel-border-bottom-${elementId}`\"\n      class=\"footer-panel-border-bottom\"\n      label=\"Border Bottom\"\n      :value=\"toggle\"\n      @change=\"onUpdateToggle\"\n    />\n    <span v-if=\"toggle\">\n      <DropdownComponent\n        :name=\"`footer-panel-border-bottom-width-${elementId}`\"\n        :options=\"widthOptions\"\n        :value=\"borderWidth\"\n        width=\"50\"\n        @change=\"onUpdateWidth\"\n      />\n      <DropdownComponent\n        :name=\"`footer-panel-border-bottom-style-${elementId}`\"\n        :options=\"borderStyles\"\n        :value=\"borderStyle\"\n        width=\"70\"\n        @change=\"onUpdateStyle\"\n      />\n      <ColorPickerComponent\n        :name=\"`footer-panel-border-bottom-color-${elementId}`\"\n        :value=\"borderColor\"\n        @change=\"onUpdateColor\"\n      />\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport _ from 'lodash'\nimport { Component, Prop, Watch } from 'vue-property-decorator'\nimport BaseComponent from '../../core/BaseComponent'\nimport { BORDER_STYLE } from '../../constants/Style'\n\n@Component\nexport default class BorderStyleComponent extends BaseComponent {\n  @Prop(String) elementId!: string\n  @Prop() elementProps!: any\n  @Prop() management!: any\n  \n  toggle = false\n  borderWidth = '1'\n  borderStyle = 'solid'\n  borderColor = '#ffffff'\n\n  get widthOptions() {\n    const lists = []\n    for (let i = 1; i < 16; i++) {\n      lists.push({ label: `${i}px`, value: `${i}` })\n    }\n    return lists\n  }\n\n  get borderStyles() {\n    return BORDER_STYLE\n  }\n\n  doAssignDefaultData() {\n    this.borderWidth = '1'\n    this.borderStyle = 'solid'\n    this.borderColor = '#ffffff'\n  }\n\n  doAssignPropData() {\n    const haveBorderBottom = this.elementProps && this.elementProps['border-bottom']\n    if (haveBorderBottom) {\n      const borderBottom = _.cloneDeep(this.elementProps['border-bottom'])\n      this.toggle = haveBorderBottom\n      this.borderWidth = borderBottom.width.substring(0, borderBottom.width.length - 2)\n      this.borderStyle = borderBottom.style\n      this.borderColor = borderBottom.color\n    } else {\n      this.doAssignDefaultData()\n    }\n    return haveBorderBottom\n  }\n\n  onUpdateToggle(value: any) {\n    this.toggle = value\n    this.onEmitData()\n  }\n\n  onUpdateWidth(width: any) {\n    this.borderWidth = width\n    this.onEmitData()\n  }\n\n  onUpdateStyle(style: any) {\n    this.borderStyle = style\n    this.onEmitData()\n  }\n\n  onUpdateColor(color: any) {\n    this.borderColor = color\n    this.onEmitData()\n  }\n\n  onEmitData() {\n    this.$emit('change', this.toggle\n      ? {\n          'border-bottom': {\n            width: `${this.borderWidth}px`,\n            style: this.borderStyle,\n            color: this.borderColor\n          }\n        }\n      : undefined\n    )\n  }\n\n  @Watch('toggle')\n  onToggleUpdate() {\n    if (this.toggle) { this.doAssignPropData() }\n    else { this.doAssignDefaultData() }\n    this.onEmitData()\n  }\n\n  @Watch('management.edit')\n  onEdit() {\n    if (this.management.edit) {\n      const haveProps = this.doAssignPropData()\n      if (!haveProps) { this.toggle = false }\n      this.onEmitData()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  @import '../../assets/scss/Main.scss';\n</style>\n\n\n"]}]}